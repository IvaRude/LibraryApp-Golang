// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	models "homework-3/internal/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorsRepo is a mock of AuthorsRepo interface.
type MockAuthorsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorsRepoMockRecorder
}

// MockAuthorsRepoMockRecorder is the mock recorder for MockAuthorsRepo.
type MockAuthorsRepoMockRecorder struct {
	mock *MockAuthorsRepo
}

// NewMockAuthorsRepo creates a new mock instance.
func NewMockAuthorsRepo(ctrl *gomock.Controller) *MockAuthorsRepo {
	mock := &MockAuthorsRepo{ctrl: ctrl}
	mock.recorder = &MockAuthorsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorsRepo) EXPECT() *MockAuthorsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAuthorsRepo) Add(ctx context.Context, author *models.Author) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, author)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAuthorsRepoMockRecorder) Add(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAuthorsRepo)(nil).Add), ctx, author)
}

// DeleteById mocks base method.
func (m *MockAuthorsRepo) DeleteById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockAuthorsRepoMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockAuthorsRepo)(nil).DeleteById), ctx, id)
}

// GetByID mocks base method.
func (m *MockAuthorsRepo) GetByID(ctx context.Context, id int64) (*models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAuthorsRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAuthorsRepo)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockAuthorsRepo) Update(ctx context.Context, author *models.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthorsRepoMockRecorder) Update(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthorsRepo)(nil).Update), ctx, author)
}

// MockBooksRepo is a mock of BooksRepo interface.
type MockBooksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBooksRepoMockRecorder
}

// MockBooksRepoMockRecorder is the mock recorder for MockBooksRepo.
type MockBooksRepoMockRecorder struct {
	mock *MockBooksRepo
}

// NewMockBooksRepo creates a new mock instance.
func NewMockBooksRepo(ctrl *gomock.Controller) *MockBooksRepo {
	mock := &MockBooksRepo{ctrl: ctrl}
	mock.recorder = &MockBooksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksRepo) EXPECT() *MockBooksRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBooksRepo) Add(ctx context.Context, book *models.Book) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, book)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockBooksRepoMockRecorder) Add(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBooksRepo)(nil).Add), ctx, book)
}

// GetByID mocks base method.
func (m *MockBooksRepo) GetByID(ctx context.Context, id int64) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBooksRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBooksRepo)(nil).GetByID), ctx, id)
}
