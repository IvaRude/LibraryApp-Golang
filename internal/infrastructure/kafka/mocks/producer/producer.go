// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go

// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaProducer)(nil).Close))
}

// SendAsyncMessage mocks base method.
func (m *MockKafkaProducer) SendAsyncMessage(message *sarama.ProducerMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAsyncMessage", message)
}

// SendAsyncMessage indicates an expected call of SendAsyncMessage.
func (mr *MockKafkaProducerMockRecorder) SendAsyncMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsyncMessage", reflect.TypeOf((*MockKafkaProducer)(nil).SendAsyncMessage), message)
}

// SendSyncMessage mocks base method.
func (m *MockKafkaProducer) SendSyncMessage(message *sarama.ProducerMessage) (int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessage", message)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSyncMessage indicates an expected call of SendSyncMessage.
func (mr *MockKafkaProducerMockRecorder) SendSyncMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessage", reflect.TypeOf((*MockKafkaProducer)(nil).SendSyncMessage), message)
}

// SendSyncMessages mocks base method.
func (m *MockKafkaProducer) SendSyncMessages(messages []*sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessages", messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSyncMessages indicates an expected call of SendSyncMessages.
func (mr *MockKafkaProducerMockRecorder) SendSyncMessages(messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessages", reflect.TypeOf((*MockKafkaProducer)(nil).SendSyncMessages), messages)
}
